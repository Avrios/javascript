{
  /*
   * ENVIRONMENTS
   * =================
   */

  // Define globals exposed by modern browsers.
  "browser": true,

  // Do not allow ES6.
  "esnext": false,

  // This option defines globals that are usually used for logging poor-man's debugging: console, alert, etc
  "devel": true,

  /*
   * ENFORCING OPTIONS
   * =================
   */

  // Force all variable names to use either camelCase style or UPPER_CASE
  // with underscores.
  "camelcase": true,

  // Prohibit use of == and != in favor of === and !==.
  "eqeqeq": true,

  // Enforce tab width of 4 spaces.
  "indent": 4,

  // Prohibit use of a variable before it is defined.
  "latedef": true,

  // Enforce line length to 120 characters
  "maxlen": 120,

  // Require capitalized names for constructor functions.
  "newcap": true,

  // Enforce use of single quotation marks for strings.
  "quotmark": "single",

  // Enforce placing 'use strict' at the top function scope
  "strict": true,

  // Prohibit use of explicitly undeclared variables.
  "undef": true,

  // Warn when variables are defined but never used.
  "unused": true,

  // This option prohibits the use of bitwise operators such as ^ (XOR), | (OR) and others.
  "bitwise": true,

  // This option requires you to always put curly braces around blocks in loops and conditionals.
  "curly": true,

  // This option prohibits the use of arguments.caller and arguments.callee. Both .caller and .callee
  // make quite a few optimizations impossible so they were deprecated in future versions of JavaScript. 
  // In fact, ECMAScript 5 forbids the use of arguments.callee in strict mode.
  "noarg": true,

  /*
   * RELAXING OPTIONS
   * =================
   */

  // Suppress warnings about == null comparisons.
  "eqnull": true
}
